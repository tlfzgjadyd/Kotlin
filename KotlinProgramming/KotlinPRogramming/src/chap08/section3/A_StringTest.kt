package chap08.section3

import kotlin.reflect.typeOf

/* < 문자열의 기본 처리 >
* 문자열은 불변값으로 생성되기에 참조되고있는 메모리가 변경될 수 없다
* 새로운 값 할당하고 싶으면 새로운 문자열이 생겨서 할당되는 방식임
* var를 통해 값을 변경하더라도 실제론 변경이 아니라 새메모리 할당하는 방식
* 기존에 쓰던 메모리는 GC(가비지 콜렉터)에 의해 제거되는데 제거 시점을 마음대로 정할수가 없기에
* 문자열을 여러개 다룰때는 메모리 낭비 안되게 주의해야됨
*
* < 메모리 관점의 String >
* JVM 기반으로 동작하는 코틀린은 자바에서 만든 구조의 메모리를 사용함
* 자바에서 String은 2가지 방법으로 초기화되는데 그 둘은 다음과 같다
* 1. 리터럴         : String str1 = "literal 방식";
* 2. new 연산자     : String str2 = new String("new방식");
* 
* 리터럴 방식으로 저장되는 경우 JVM의 메모리중 상수 풀에 저장된다
* new 방식으로 저장되는 경우 String객체는 힙에 생성됨
* 리터럴 방식으로 선언시 문자열 내용만 같으면 s1과 s2는 같은곳을 가리키지만
* new방식으로 선언하는 경우 매번 아예 새로운 객체로 생긴다
*
* 근데 자바 7부터는 상수풀 영역이 힙 영역으로 옮겨져서 기존의 메모리 부족 오류를 개선했다함
* 그래서 원래는 문자열은 GC로 제거하는 대상이 아니었으나
* 자바7부터는 GC대상이 되어 참조 없을 경우 메모리에서 삭제됨
*
* < 문자열 추출하기 >
* 1. 문자열명.substring(시작인덱스..끝인덱스)  : 이럴 경우 시작인덱스~끝인덱스만 뽑아서 String 타입으로 반환한다
* 2. 문자열명.subSequence(시작인덱스..끝인덱스) : 이럴경우 같은 기능을 하지만 CharSequence 타입을 반환하나봄
* => 만약 뒤에서부터 추출하고 싶은 경우 length를 이용한다
*    마지막 인덱스를 알고싶을 경우 s.length-1로 정하면됨
*    문자열도 배열처럼 첫번째 인덱스는 0이기 때문에
*    s.length 해버리면 없는 방번호됨
* => 그리고 ..이 갖는 특성대로 시작인덱스..끝인덱스의 경우 다른 언어들에서와 달리 끝인덱스가 포함된다
* => 이때 신기하게도 subSequence는 중간에 대문자로 다시시작하는데 substring은 그냥 계속 소문자임
* 
* < 문자열 병합하기 >
* +기호로 가능함
* val s1 = s2 + s3
* 
* < 문자열 비교실험 >
* str1.compareTo(str2) 를 통해 문자열 비교 가능
* 만약 str1 내용이 str2과 같다면 0을 반환한다
* 둘의 길이 비교가 아니라 내용 비교임에 주의해야됨
* s1이 s2보다 작으면 양수 반대일 경우 음수가 나온다는데
* 길이비교도 아니면서 왜 양수 음수 나눠논건지 모르겠음
* 어쨌든 양수 음수 나오는건 compareTo 전달인자로 넘긴 str2 기준으로 된다는 것에 주의한다
* 
* 그리고 compareTo는 대소문자를 다른걸로 인식하기에
* 만약 대소문자 무시하고 내용 확인하고 싶을 경우 2번째 전달인자로 true 줘야됨
* str1.compareTo(str2, true)
* */

fun main() {
    ///////////////////////////////// string 작동실험 //////////////////////////////////////////////////////////
    //위의 주석에서 설명한 2가지 방식은 자바 코드라 아래 2줄은 작동안함
   // String str = " ";
   // String str2 = new String("new방식");
    
    //코틀린에서 실험하기 위해선 String 대신 val이나 var을 써야겠지 그렇게 선언하기로 정해져있음
    val str = "string";
   // val str2= new String("new"); //근데 코틀린에 new 키워드가 없다보니 이 방식은 불가능

    ///////////////////////////////// 문자열 추출실험 //////////////////////////////////////////////////////////
    val s ="abcdef"
    val s2 = s.substring(0..(s.length-1))
    println(s2)
    val s3 = s.subSequence(2..4)
    println(s3)

    //////////////////////////////// 문자열 병합실험 //////////////////////////////////////////////////////////
    var s4 = "abcdef"
    var s5 = s.substring(0..1)+"x"+s.substring(3..s.length-1)
    println(s5)

    //////////////////////////////// 문자열 비교실험 //////////////////////////////////////////////////////////
    var s6 = "hello kotlin"
    var s7 = "HELLO KOTLIN"
    var s8 = "hohho kotlin"

    println(s6.compareTo(s7))                   //대소문자 달라서 0 안나옴
    println(s6.compareTo(s7, true))   //두번째 전달인자로 true 옵션 줬기에 둘이 같은걸로 인식하고 0나옴
    println(s6.compareTo(s8))                   //문자열 길이가 아니라 내용 비교하는거라 0 안나옴
}