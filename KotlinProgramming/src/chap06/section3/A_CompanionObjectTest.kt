package chap06.section3

/* < 변수의 생명주기 >
* 지역변수 : 특정 코드블록 내에서만 살아있음, 블록 벗어나면 메모리에서 삭제됨
* 전역변수 : 프로그램 실행되는 내내 메모리에서 유지됨
*
* < 정적변수와 컴패니언 객체가 나오게 된 배경 >
* 클래스는 보통 인스턴스 생성할때 메모리에 동적으로 초기화한다
* 그러나 동적인 초기화 없이도 프로퍼티 등을 초기화하고싶음
* 이때 정적 변수 또는 컴패니언 객체를 사용한다
*
* < 정적변수와 컴패니언 객체 특징 >
* 1. 프로그램을 실행할때 고정적으로 가지는 메모리다
* 2. 객체 생성 없이 사용할 수 있다
* 3. 클래스 상태에 상관 없이 접근 가능하다
* * 4. 모든 객체는 그 값을 공유한다
* 5. 컴패니언 객체는 싱글톤으로 정의된다 (어짜피 공유될거라 반복 정의시 메모리 낭비이기 때문)
* => 즉 자바에서 인스턴스 생성 전에 미리 초기화해놓는 static 관련 그거랑 비슷한 기능인듯
* 
* <컴패니언 객체 사용하기 >
* 코틀린에서는 정적변수 쓸때 static 키워드가 없는 대신 컴패니언 객체를 제공한다
* 아래는 컴패니언 객체를 사용해보는 예제임
*
* < 컴패니언 객체 사용법 >
* companion object{
*     정적으로 사용하고싶은 프로퍼티, 메소드등을 여기에 둔다
*     이때 프로퍼티는 반드시 초기화해줘야 에러안남
*     그래야 인스턴스 생성 전에 기본값 사용할 수 있기 때문
* }
* 이후 해당 클래스에서 인스턴스 생기기 전에 컴패니언 객체 안의 프로퍼티, 메소드 등을 사용해본다
* 만약 컴패니언 객체 안에 있지 않은 일반 프로퍼티들을 사용하려 할 경우 에러가 나는걸 확인할 수 있음
* */

class Person{
    var id: Int=0                   //id는 일반 변수다
    var name: String = "tlfzgjadyd" //name도 일반 변수다
    companion object{ //컴패니언 객체는 companion object라는 키워드를 통해 사용한다
        var language: String = "Korean" //language 프로퍼티는 컴패니언 객체 안에 둠으로써 인스턴스 생성 전에도 사용할 수 있다
        fun work(){                     //마찬가지로 work 메소드 역시 컴패니언 객체 안에 둠으로써 인스턴스 생성전 사용 가능
            println("working...")
        }
    }
}

fun main() {
    println(Person.language) //인스턴스가 생기기 전인데도 Person클래스의 프로퍼티값을 사용하려 하고있음, 기본값이 제공된다
    Person.language = "English" //기본값 변경 가능
    Person.work() //인스턴스가 생기기 전인데도 Person클래스의 컴패니언 객체 안에 둔 메서드 실행
    //println(Person.name) //name은 컴패니언 객체가 아니므로 오류
}