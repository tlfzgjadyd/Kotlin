package chap06.section3

/*이번에는 위에서의 실험 반대로 코틀린에 정의한 정적 변수와 메소드를 자바에서 가져다 써볼거임
* 이때 새로운게 등장했는데 @JvmStatic이 그것이다
* 그리고 const의 역할에 대해 알아볼거임
* 그다음엔 @JvmField도 알아볼거임
* 
* < 애노테이션 표기의 기능 >
* 1. 주석이기도함
* 2. 컴파일러가 목적에 맞게 검사하도록함
* 3. 런타임에 특정 기능을 수행하게 할 수도 있음
* 
* < @JvmStatic의 기능 >
* 자바에 있는 정적변수를 코틀린에서 가져다 쓸때는 그냥 쓰면 되지만
* 코틀린에 있는 컴패니언 객체를 자바에서 가져다 쓰려면 코틀린측에서 @JvmStatic 어노테이션을 사용해줘야 한다
*
* < const val >
* 1. 그냥 val : 런타임에 값을 할당함
* 2. const val : 컴파일 타임에 값을 할당함
* => const val에 사용되는 const는 컴파일 시간 상수로 이걸 붙이면 컴파일 타임에 미리 값을 할당하게 할 수 있음
* 자바에서 코틀린에 선언된 정적 변수에 접근하기 위해서는 const를 사용해야한다
* 
* < @JvmField의 기능 >
* 이게 정확히 무슨 역할을 하는건진 모르겠음 안나와있음
* 근데 특정 자료형을 사용할때 사용한다고 함
* 그래서 생각하건데 아래의 실험에선 JOB 변수엔 KJob 클래스의 객체를 할당한 다음
* 자바측에서 JOB을 사용하고 있는것으로 보아
* 기본 제공되는 자료형은 const val로 정적변수화 할 수 있지만
* 클래스를 할당한 변수같은 경우에는 @JvmField를 써야 자바측에서 가져다 쓸 수 있다고 생각해볼 수 있다
* */

class c_KCustomer {
    companion object{
        //1. 정적변수
        const val LEVEL = "INTERMEDIATE" //const는 컴파일 시간 상수 ( 그냥 val과 달리 컴파일 시간에 이미 값이 할당되는것)
                                         //자바에서 접근하려면 필요하다
        
        //2. 정적 메소드
        @JvmStatic fun login() = println("Login...") //애노테이션 표기 사용
        
        //3. 특정 자료형을 사용하기 위한 애노테이션
        @JvmField val JOB = KJob() //특정 자료형을 쓴다는게 뭔소린진 모르겠지만 JOB변수에 KJob클래스 객체를 할당한듯
                                   //KJob는 메소드가 아니라 클래스지만 KJob() 함으로써 기본 생성자가 생성되는 것이라고 생각함
    }
}

class KJob {
    var title: String = "Programmer"
}